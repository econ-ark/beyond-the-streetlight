name: REMARK Validation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.9'

jobs:
  validate-remark:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'binder/environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl
        
    - name: Setup REMARK validation tools
      run: |
        export REMARK_TOOLS_DIR="${REMARK_TOOLS_DIR:-$HOME/remark-tools}"
        git clone https://github.com/econ-ark/REMARK.git "$REMARK_TOOLS_DIR"
        cd "$REMARK_TOOLS_DIR"
        pip install -r requirements.txt
        echo "REMARK_TOOLS_DIR=$REMARK_TOOLS_DIR" >> $GITHUB_ENV
        
    - name: Create REMARK catalog entry for validation
      run: |
        mkdir -p "$REMARK_TOOLS_DIR/REMARKs"
        cat > "$REMARK_TOOLS_DIR/REMARKs/validation-temp.yml" << EOF
        name: $(basename $GITHUB_REPOSITORY)
        remote: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
        version: ${GITHUB_REF#refs/tags/}
        EOF
        
    - name: Validate REMARK compliance
      run: |
        cd "$REMARK_TOOLS_DIR"
        python cli.py lint REMARKs/validation-temp.yml
        
    - name: Test repository build
      run: |
        cd "$REMARK_TOOLS_DIR"
        python cli.py build REMARKs/validation-temp.yml
        
    - name: Test quick reproduction (if available)
      run: |
        if [ -f reproduce_min.sh ]; then
          echo "Testing quick reproduction..."
          timeout 300 bash reproduce_min.sh || echo "Quick reproduction timed out or failed"
        else
          echo "No reproduce_min.sh found, skipping quick test"
        fi
        
    - name: Validate metadata files
      run: |
        echo "Checking required files..."
        
        # Check CITATION.cff
        if [ ! -f CITATION.cff ]; then
          echo "❌ CITATION.cff is missing"
          exit 1
        fi
        
        # Validate CITATION.cff syntax
        python -c "
        import yaml
        try:
          with open('CITATION.cff', 'r') as f:
            yaml.safe_load(f)
          print('✅ CITATION.cff is valid YAML')
        except Exception as e:
          print(f'❌ CITATION.cff validation failed: {e}')
          exit(1)
        "
        
        # Check reproduce.sh
        if [ ! -f reproduce.sh ]; then
          echo "❌ reproduce.sh is missing"
          exit 1
        fi
        
        if [ ! -x reproduce.sh ]; then
          echo "⚠️  reproduce.sh is not executable, fixing..."
          chmod +x reproduce.sh
        fi
        
        # Check binder environment
        if [ ! -f binder/environment.yml ]; then
          echo "❌ binder/environment.yml is missing"
          exit 1
        fi
        
        # Validate environment.yml syntax
        python -c "
        import yaml
        try:
          with open('binder/environment.yml', 'r') as f:
            yaml.safe_load(f)
          print('✅ binder/environment.yml is valid YAML')
        except Exception as e:
          print(f'❌ binder/environment.yml validation failed: {e}')
          exit(1)
        "
        
        echo "✅ All required files present and valid"
        
    - name: Check metadata completeness
      run: |
        python -c "
        import yaml
        
        # Check CITATION.cff completeness
        with open('CITATION.cff', 'r') as f:
          citation = yaml.safe_load(f)
          
        required_fields = ['title', 'authors', 'version', 'date-released']
        missing_fields = [field for field in required_fields if field not in citation]
        
        if missing_fields:
          print(f'❌ CITATION.cff missing required fields: {missing_fields}')
          exit(1)
        else:
          print('✅ CITATION.cff has all required fields')
          
        # Check for recommended fields
        recommended_fields = ['abstract', 'keywords', 'url', 'license']
        missing_recommended = [field for field in recommended_fields if field not in citation]
        
        if missing_recommended:
          print(f'⚠️  CITATION.cff missing recommended fields: {missing_recommended}')
        else:
          print('✅ CITATION.cff has all recommended fields')
        "
        
    - name: Test environment setup
      run: |
        echo "Testing conda environment creation..."
        
        # Install conda
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda
        source $HOME/miniconda/bin/activate
        
        # Test environment creation
        conda env create -f binder/environment.yml -n test-env
        conda activate test-env
        
        echo "✅ Environment setup successful"
        
    - name: Generate validation report
      if: always()
      run: |
        echo "# REMARK Validation Report" > validation-report.md
        echo "" >> validation-report.md
        echo "**Repository:** $GITHUB_REPOSITORY" >> validation-report.md
        echo "**Commit:** $GITHUB_SHA" >> validation-report.md
        echo "**Date:** $(date -u)" >> validation-report.md
        echo "" >> validation-report.md
        
        echo "## Validation Results" >> validation-report.md
        echo "" >> validation-report.md
        
        if [ -f CITATION.cff ]; then
          echo "- ✅ CITATION.cff present" >> validation-report.md
        else
          echo "- ❌ CITATION.cff missing" >> validation-report.md
        fi
        
        if [ -f reproduce.sh ]; then
          echo "- ✅ reproduce.sh present" >> validation-report.md
        else
          echo "- ❌ reproduce.sh missing" >> validation-report.md
        fi
        
        if [ -f binder/environment.yml ]; then
          echo "- ✅ binder/environment.yml present" >> validation-report.md
        else
          echo "- ❌ binder/environment.yml missing" >> validation-report.md
        fi
        
        if [ -f REMARK.md ]; then
          echo "- ✅ REMARK.md present (recommended)" >> validation-report.md
        else
          echo "- ⚠️  REMARK.md missing (recommended for website display)" >> validation-report.md
        fi
        
        echo "" >> validation-report.md
        echo "## Next Steps" >> validation-report.md
        echo "" >> validation-report.md
        echo "If validation passed, this repository is ready for REMARK submission." >> validation-report.md
        echo "Submit a PR to the REMARK repository with a catalog entry." >> validation-report.md
        
    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: remark-validation-report
        path: validation-report.md
        
    - name: Comment on PR with validation results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('validation-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## REMARK Validation Results\n\n${report}`
          });

  test-reproduction:
    runs-on: ubuntu-latest
    needs: validate-remark
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install conda
      run: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda
        source $HOME/miniconda/bin/activate
        echo "$HOME/miniconda/bin" >> $GITHUB_PATH
        
    - name: Create and activate environment
      run: |
        conda env create -f binder/environment.yml -n reproduction-test
        
    - name: Test full reproduction
      run: |
        source $HOME/miniconda/bin/activate
        conda activate reproduction-test
        
        echo "Starting full reproduction test..."
        timeout 1800 bash reproduce.sh || {
          echo "❌ Full reproduction failed or timed out (30 minutes)"
          exit 1
        }
        
        echo "✅ Full reproduction completed successfully"
        
    - name: Archive reproduction outputs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: reproduction-outputs
        path: |
          results/
          figures/
          data/output/
          *.log
        retention-days: 30 